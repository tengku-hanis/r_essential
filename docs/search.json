[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "R Essentials: A Beginner’s Guide to Data Analysis",
    "section": "",
    "text": "Welcome\n\nThis book is intended for anyone interested in using R for applied statistical analysis and machine learning. I first encountered R (specifically RStudio) during my master’s studies, and it wasn’t an easy journey—especially as someone from a non-coding background. Initially, I was introduced to software like SPSS and STATA, and eventually R during my master’s studies. R felt unfamiliar and complex by comparison to the previous software. However, those who could use R proficiently seemed impressive to me, which motivated me to keep going. Surprisingly, the learning process became much easier as I keep using R.\nLooking back, I wish I had known certain things earlier or that experienced R users had shared their insights from the start. This book is my attempt to provide those insights, covering the key concepts and tips I wish I had had when I started. I hope it sparks interest in R for others and helps them fully utilize its capabilities.\nFinally, I just want to say thanks to my amazing wife, Asmaq, my parents, Tengku Mokhtar and Nor Malaysia, and my in-laws, Mazalan and Salmeh, for all their understanding. Writing this book means taking the time I would usually spend with them, and while they might not fully get my obsession with R and data analysis (especially my wife!), they’ve supported me every step of the way.\nTengku Muhammad Hanis Bin Tengku Mokhtar, PhD",
    "crumbs": [
      "Welcome"
    ]
  },
  {
    "objectID": "basic-r.html",
    "href": "basic-r.html",
    "title": "3  Basics of R",
    "section": "",
    "text": "3.1 Data types in R\nThere are a few data types in R:\nLet us see the example in R:\nFor the numeric:\nx1 &lt;- 11\nx2 &lt;- 11.9\n\nclass(x1); class(x2)\n\n[1] \"numeric\"\n\n\n[1] \"numeric\"\nBoth numbers are recognised as numeric in R. For integers, the number should be denoted by ‘L’ to be recognised as an integer.\nx3 &lt;- 11L\n\nclass(x3)\n\n[1] \"integer\"\nFor logical values, the boolean operators such as ‘FALSE’ and ‘TRUE’ are examples of logical values.\nx4 &lt;- c(TRUE, FALSE)\n\nclass(x4)\n\n[1] \"logical\"\nNext, we have character values.\nx5 &lt;- c(\"fruit\", \"apple\")\n\nclass(x5)\n\n[1] \"character\"\nLastly, we have complex values. The type of data is usually used to store numbers and imaginary components (for example, i in the code below).\nx6 &lt;- 9 + 3i\n\nclass(x6)\n\n[1] \"complex\"\nIt is important to note the data type for each value as the function for numeric values can only be applied to numeric values. For example, if we want to find a mean value.\nnumeric_val &lt;- 1:10 #list out all numbers between 1 and 10\nnumeric_val\n\n [1]  1  2  3  4  5  6  7  8  9 10\n\ncharacter_val &lt;- letters[1:10] #list out the first 10 alphabets\ncharacter_val\n\n [1] \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h\" \"i\" \"j\"\nNow, let us try applying the mean function to both data.\nmean(numeric_val)\n\n[1] 5.5\n\nmean(character_val)\n\nWarning in mean.default(character_val): argument is not numeric or logical:\nreturning NA\n\n\n[1] NA\nSo, R gives us a warning that the ‘character_val’ is not a numeric or logical value. Thus, the returning NA mean not available.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Basics of R</span>"
    ]
  },
  {
    "objectID": "data-explore.html",
    "href": "data-explore.html",
    "title": "6  Data exploration",
    "section": "",
    "text": "This chapter is currently under construction. Stay tuned for updates!",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Data exploration</span>"
    ]
  },
  {
    "objectID": "data-wrangling.html",
    "href": "data-wrangling.html",
    "title": "4  Data wrangling",
    "section": "",
    "text": "This chapter is currently under construction. Stay tuned for updates!",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Data wrangling</span>"
    ]
  },
  {
    "objectID": "descriptive-stat.html",
    "href": "descriptive-stat.html",
    "title": "7  Descriptive statistics",
    "section": "",
    "text": "This chapter is currently under construction. Stay tuned for updates!",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Descriptive statistics</span>"
    ]
  },
  {
    "objectID": "install-r.html",
    "href": "install-r.html",
    "title": "2  Installing R and RStudio",
    "section": "",
    "text": "This chapter is currently under construction. Stay tuned for updates!",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Installing R and RStudio</span>"
    ]
  },
  {
    "objectID": "plotting.html",
    "href": "plotting.html",
    "title": "5  Data visualisation",
    "section": "",
    "text": "This chapter is currently under construction. Stay tuned for updates!",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Data visualisation</span>"
    ]
  },
  {
    "objectID": "what-is-r.html",
    "href": "what-is-r.html",
    "title": "1  What is R?",
    "section": "",
    "text": "R is a language and environment for statistical computing and graphics.\nThis chapter is currently under construction. Stay tuned for updates!",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>What is R?</span>"
    ]
  },
  {
    "objectID": "basic-r.html#data-types-in-r",
    "href": "basic-r.html#data-types-in-r",
    "title": "3  Basics of R",
    "section": "",
    "text": "Numeric\nInteger\nLogical\nCharacter\nComplex",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Basics of R</span>"
    ]
  },
  {
    "objectID": "basic-r.html#data-structure-in-r",
    "href": "basic-r.html#data-structure-in-r",
    "title": "3  Basics of R",
    "section": "3.2 Data structure in R",
    "text": "3.2 Data structure in R\nThere are a few data structures in R:\n\nVector\nMatrix\nArray\nData frame\nList\n\n\n\n\n\n\n\nFigure 3.1: Data structures in R\n\n\n\nDepending on the fields, certain data structures are more common compared to others.\n\n3.2.1 Vector\nVector is the most basic data structure in R. It can contain one data type at a time.\n\nvec_data &lt;- c(1, 2, 3, 4)\nvec_data\n\n[1] 1 2 3 4\n\n\nThe structure of the data can be checked using the function str().\n\nstr(vec_data)\n\n num [1:4] 1 2 3 4\n\n\nWe can further confirm whether vec_data is a vector or not by using the is.vector() function.\n\nis.vector(vec_data)\n\n[1] TRUE\n\n\nA TRUE result indicates that the data is a vector type.\n\n\n3.2.2 Matrix\nA matrix contains at least a single row and a single column. Contrary, to a vector which contains only a single row or a single column.\n\nmat_data &lt;- matrix(data = c(1, 2, 3, 4, 5, 6), nrow = 3, ncol = 2)\nmat_data\n\n     [,1] [,2]\n[1,]    1    4\n[2,]    2    5\n[3,]    3    6\n\n\nBy using str() function, we can see that the values are numerical and we have a matrix with 3 rows and 2 columns.\n\nstr(mat_data)\n\n num [1:3, 1:2] 1 2 3 4 5 6\n\n\nNext, we can confirm that our data is a matrix by using is.matrix().\n\nis.matrix(mat_data)\n\n[1] TRUE\n\n\n\n\n3.2.3 Array\nAn array is quite similar to a matrix except that it can contain several layers of rows and columns.\n\narr_data &lt;- array(data = c(1:6, 10:16), dim = c(2, 3, 2))\narr_data\n\n, , 1\n\n     [,1] [,2] [,3]\n[1,]    1    3    5\n[2,]    2    4    6\n\n, , 2\n\n     [,1] [,2] [,3]\n[1,]   10   12   14\n[2,]   11   13   15\n\n\nAs we can see, we have an array of 2 layers with each layer having 2 rows and 3 columns. By using the str() function, we can see that R recognises the array has integer values with 3 dimensions. The first dimension, 1:2 refers to the rows, the second dimension, 1:3 refers to the columns, and the last dimension, 1:2 refers to the layers.\n\nstr(arr_data)\n\n int [1:2, 1:3, 1:2] 1 2 3 4 5 6 10 11 12 13 ...\n\n\nis.array() can be used to ensure the data structure.\n\nis.array(arr_data)\n\n[1] TRUE\n\n\n\n\n3.2.4 Data frame\nA data frame is the extension of the matrix data structure. The difference between the former and the latter, the former contains the column names and each column may contain different data types.\n\ndf_data &lt;- data.frame(\n  ID = 1:5,\n  Name = c(\"Mamat\", \"Abu\", \"Ali\", \"Chong\", \"Eva\"),\n  Age = c(25, 30, 22, 35, 28),\n  Score = c(89, 95, 76, 88, 92)\n)\ndf_data\n\n  ID  Name Age Score\n1  1 Mamat  25    89\n2  2   Abu  30    95\n3  3   Ali  22    76\n4  4 Chong  35    88\n5  5   Eva  28    92\n\n\nWe can further check the data structure and type using str(). So, our data structure is data frame, consists of 4 columns; the first column is integer, second column is character, third and fourth column are numeric.\n\nstr(df_data)\n\n'data.frame':   5 obs. of  4 variables:\n $ ID   : int  1 2 3 4 5\n $ Name : chr  \"Mamat\" \"Abu\" \"Ali\" \"Chong\" ...\n $ Age  : num  25 30 22 35 28\n $ Score: num  89 95 76 88 92\n\n\nWe can double-check the data structure using is.data.frame().\n\nis.data.frame(df_data)\n\n[1] TRUE\n\n\n\n\n3.2.5 List\nLastly, we have a list. So, the list is a more advanced data structure in which we can have different data structures in a data structure. Let us see the example of a list in which we combine the previous vector and matrix data structures.\n\nlist_data &lt;- list(\n  \"vector\" = vec_data,\n  \"matrix\" = mat_data\n)\nlist_data\n\n$vector\n[1] 1 2 3 4\n\n$matrix\n     [,1] [,2]\n[1,]    1    4\n[2,]    2    5\n[3,]    3    6\n\n\nWe can further assess each data in the list using the $ symbol.\n\nlist_data$vector\n\n[1] 1 2 3 4\n\n\nBy using str(), we see our data is a list with 2 elements or components; a vector and matrix.\n\nstr(list_data)\n\nList of 2\n $ vector: num [1:4] 1 2 3 4\n $ matrix: num [1:3, 1:2] 1 2 3 4 5 6\n\n\nTo further confirm our data is a list, we can use is.list().\n\nis.list(list_data)\n\n[1] TRUE",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Basics of R</span>"
    ]
  },
  {
    "objectID": "basic-r.html#packages",
    "href": "basic-r.html#packages",
    "title": "3  Basics of R",
    "section": "3.3 Packages",
    "text": "3.3 Packages\nA package is a collection of functions and sample data that can be utilised for certain tasks. Certain functions in R are already loaded when you open R or RStudio. However, to use more advanced functions we need to install and load a package.\nThe packages can installed using install.packages(). For example the code below will install dplyr package which commonly utilise for data wrangling and manipulation.\n\ninstall.packages(\"dplyr\")\n\nTo use the installed packages, we need to load the packages using the library() function.\n\nlibrary(dplyr)\n\nNow, that we know what is a package, we might wonder where exactly these packages coming from.\nThe official packages in R are located in the [Comprehensive R Archive Network (CRAN)](https://cran.r-project.org/). [This link](https://cran.r-project.org/web/packages/available_packages_by_name.html) contains all available packages in CRAN. Additionally, there is [CRAN Task Views](https://cran.r-project.org/web/views/). At the time of this writing, CRAN contains 21,606 R packages intended for various tasks.\nFurthermore, for those interested in bioinformatics, the related packages are located in the [Bioconductor](https://www.bioconductor.org/packages/release/BiocViews.html#___Software). At the time of this writing, Bioconductor contains 2,289 R packages related to bioinformatics.\nIn addition to CRAN and Bioconductor, there are unofficial R packages, which are usually located in the [GitHub](https://github.com/) and [GitLab](https://gitlab.com/r-packages). There are probably thousands of these unofficial packages. For example, [dmetar ](https://github.com/MathiasHarrer/dmetar) which is located in GitHub, contains R functions and codes to facilitate the conduction of meta-analyses.\nMore often than not, the official packages in CRAN also have their GitHub repositories in which they contains the latest development of R functions and codes before they going to be released in CRAN. So, current bugs and errors in the package are corrected first using the unofficial packages from the GitHub or GitLab before they are eventually release to the CRAN repositories.\nThere are several packages that can help in installing the unofficial packages. The two most commonly used packages are devtools and remote (or at least I commonly used them).\nFirst, we need to install the packages.\n\ninstall.packages(\"devtools\")\ninstall.packages(\"remote\")\n\nNext, we can install the unofficial packages.\n\ndevtools::install_github(\"MathiasHarrer/dmetar\")\nremotes::install_github(\"MathiasHarrer/dmetar\")\n\nMathiasHarrer is referring to the GitHub account or usually the author’s account on the GitHub, followed by the name of the package. Depending on one’s preference, we can choose to use either devtools or remote.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Basics of R</span>"
    ]
  },
  {
    "objectID": "basic-r.html#chapter-summary",
    "href": "basic-r.html#chapter-summary",
    "title": "3  Basics of R",
    "section": "3.4 Chapter summary",
    "text": "3.4 Chapter summary\nIn this chapter, we learn about:\n\nData types\nData structures\nR packages",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Basics of R</span>"
    ]
  },
  {
    "objectID": "basic-r.html#revision",
    "href": "basic-r.html#revision",
    "title": "3  Basics of R",
    "section": "3.5 Revision",
    "text": "3.5 Revision\n\nList all the data types that we learn in this chapter.\nList all the data structures that we learn in this chapter.\nWhat is the difference between installing the package and loading the package?",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Basics of R</span>"
    ]
  }
]