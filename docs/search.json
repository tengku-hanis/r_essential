[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "R Essentials: A Beginner’s Guide to Data Analysis",
    "section": "",
    "text": "Welcome\n\n\n\n\n\n\n\nThis book is in its early drafting stages; several chapters of the book are unfinished and all of it will go through significant revision and refinement.\n\n\n\n\n\n\nThis book is intended for anyone interested in using R for applied statistical analysis and machine learning. I first encountered R (specifically RStudio) during my master’s studies, and it wasn’t an easy journey—especially as someone from a non-coding background. Initially, I was introduced to software like SPSS and STATA, and eventually R during my master’s studies. R felt unfamiliar and complex by comparison to the previous software. However, those who could use R proficiently seemed impressive to me, which motivated me to keep going. Surprisingly, the learning process became much easier as I keep using R.\nLooking back, I wish I had known certain things earlier or that experienced R users had shared their insights from the start. This book is my attempt to provide those insights, covering the key concepts and tips I wish I had had when I started. I hope it sparks interest in R for others and helps them fully utilize its capabilities.\nFinally, I just want to say thanks to my amazing wife, Asmaq, my parents, Tengku Mokhtar and Nor Malaysia, and my in-laws, Mazalan and Salmeh, for all their understanding. Writing this book means taking the time I would usually spend with them, and while they might not fully get my obsession with R and data analysis (especially my wife!), they’ve supported me every step of the way.\nTengku Muhammad Hanis Bin Tengku Mokhtar, PhD",
    "crumbs": [
      "Welcome"
    ]
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "1  About the book",
    "section": "",
    "text": "This book is in its early drafting stages; many portions of the book are unfinished and all of it will go through significant revision and refinement.\n\n\n\n\n\n\nThis book is designed for beginner and novice R users, with chapters structured sequentially to introduce R step-by-step, starting with foundational topics and progressing to more complex material.\nChapters 2 to 4 introduce readers to R and RStudio. For those already somewhat familiar with R, these chapters may seem straightforward and can be skipped without issue.\nChapters 5 and 6 provide essential knowledge on basic R coding, commonly used in data analysis projects. It is advised to read these chapters thoroughly before moving on, as they lay the groundwork for more advanced topics.\nChapter 7 focuses on basic visualizations and plotting techniques. Readers will learn how to use base R functions for visual representation and will be introduced to ggplot2, a highly regarded package for data visualisation in R.\nChapter 8 covers loops and functions, a topic that may pose a challenge for beginners. This chapter aims to equip readers with the skills needed for more efficient R coding. While not critical for initial learning, understanding these concepts will become increasingly important as one progresses in data analysis.\nChapters 9 and 10 delve into essential skills for data exploration and descriptive statistics. Mastering these will enable readers to gain deeper insights into their data and prepare them for more advanced analysis techniques.\nChapter 11 concludes the book by summarizing previous content and offering guidance on next steps to further enhance R and data analysis skills.\nHappy learning!",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>About the book</span>"
    ]
  },
  {
    "objectID": "what-is-r.html",
    "href": "what-is-r.html",
    "title": "2  What is R?",
    "section": "",
    "text": "2.1 R\nR is a language and environment for statistical computing and graphics.\nThat basically summarises this whole chapter.\nReaders who are not interested in knowing more about R and its history can skip this chapter and move on to more practical chapters.\nWell, for those who keep reading this, I guess you are interested to know more about the story of how R came to be. Do not worry, this chapter is only going to cover a short version of the history of R, so, that we can appreciate this software.\nR was a successor of S language. It was developed by Ross Ihaka and Robert Gentleman at the University of Auckland in 1991. R was made known to the public only in 1993. The R version 1.0.0 was released in 2000.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>What is R?</span>"
    ]
  },
  {
    "objectID": "what-is-r.html#r",
    "href": "what-is-r.html#r",
    "title": "2  What is R?",
    "section": "",
    "text": "Figure 2.1: The logo of R software.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>What is R?</span>"
    ]
  },
  {
    "objectID": "what-is-r.html#rstudio-and-posit",
    "href": "what-is-r.html#rstudio-and-posit",
    "title": "2  What is R?",
    "section": "2.2 RStudio and Posit",
    "text": "2.2 RStudio and Posit\n\n\n\n\n\n\nFigure 2.2: The logo of RStudio.\n\n\n\nIn 2009, a company known as RStudio, Inc. was founded by Joseph J. Allaire, which later developed the RStudio software. RStudio software is an integrated development environment (IDE) which helps make R more user-friendly, especially for those without a programming background. RStudio IDE is unequivocally the most commonly used IDE for R software. The company, RStudio, Inc. later changed its corporation to a public benefit corporation (PBC) in 2020, thus, known as RStudio, PBC. Subsequently, in 2022, the company changed its name to Posit Software, PBC to cater to a larger demography of the data science community.\n\n\n\n\n\n\nFigure 2.3: The logo of Posit Software, PBC.\n\n\n\nDespite the changes in Posit company, they still strongly support the development and maintenance of RStudio IDE specifically and R in general.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>What is R?</span>"
    ]
  },
  {
    "objectID": "what-is-r.html#other-ides",
    "href": "what-is-r.html#other-ides",
    "title": "2  What is R?",
    "section": "2.3 Other IDEs",
    "text": "2.3 Other IDEs\nAs you may have guessed, we going to use RStudio in this book. However, there are other IDEs available. A few that are more common are:\n\nJupyter Notebook\nJupyterLab\nVisual Studio\n\nGiven that RStudio is initially developed for R (currently we can use Python as well in RStudio), a lot of functionalities work seamlessly with R. Thus, make it easier for R beginners and novices to use it.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>What is R?</span>"
    ]
  },
  {
    "objectID": "what-is-r.html#clouds",
    "href": "what-is-r.html#clouds",
    "title": "2  What is R?",
    "section": "2.4 Clouds",
    "text": "2.4 Clouds\nThere are a few options to use R in a cloud. Meaning that we do not need to install anything on our machines.\n\nPosit Cloud\nGoogle Colab\nKaggle\n\nThe first two clouds are free with limited use, though you need to make an account. Kaggle is totally free to use as far as I know. However, Kaggle does not have functions such as code completion which is very helpful to beginners. This function is available in the first two clouds.\nHowever, if you are looking for something more familiar to RStudio, Posit Cloud is the best choice. The functionalities and the overall look of the Posit Cloud are identical to RStudio.\n\n\n\n\n\n\nFigure 2.4: The interface of RStudio in Posit Cloud.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>What is R?</span>"
    ]
  },
  {
    "objectID": "what-is-r.html#chapter-summary",
    "href": "what-is-r.html#chapter-summary",
    "title": "2  What is R?",
    "section": "2.5 Chapter summary",
    "text": "2.5 Chapter summary\nIn this chapter, we learn about what are R and RStudio.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>What is R?</span>"
    ]
  },
  {
    "objectID": "what-is-r.html#revision",
    "href": "what-is-r.html#revision",
    "title": "2  What is R?",
    "section": "2.6 Revision",
    "text": "2.6 Revision\n\nWhat is the difference between R and RStudio IDE?\nWhat is the difference between RStudio IDE, RStudio, Inc., and RStudio, PBC?\nWhat are other IDEs for R?",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>What is R?</span>"
    ]
  },
  {
    "objectID": "install-r.html",
    "href": "install-r.html",
    "title": "3  Installing R and RStudio",
    "section": "",
    "text": "3.1 Installing R\nR can be installed regardless of your operating system. R is available for Windows, Mac, and Linux users. This page (https://cran.r-project.org/) contains all the necessary information needed to install R. Additionally, if you are stuck, I highly recommend you to watch a few YouTube videos on how to install R.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Installing R and RStudio</span>"
    ]
  },
  {
    "objectID": "install-r.html#installing-rstudio",
    "href": "install-r.html#installing-rstudio",
    "title": "3  Installing R and RStudio",
    "section": "3.2 Installing RStudio",
    "text": "3.2 Installing RStudio\nOnce you have installed R, you need to install RStudio IDE. This page (https://posit.co/download/rstudio-desktop/) contains all the information including the related links necessary to download and install RStudio. Again, if you are stuck, I highly recommend you watch a few YouTube videos on how to install RStudio.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Installing R and RStudio</span>"
    ]
  },
  {
    "objectID": "install-r.html#installing-rtools",
    "href": "install-r.html#installing-rtools",
    "title": "3  Installing R and RStudio",
    "section": "3.3 Installing RTools",
    "text": "3.3 Installing RTools\nThis process is specific to Windows users only. If you are a Linux or Mac user, feel free to skip this part. Rtools is a collection of tools required to build R packages from source on Windows systems. Basically, you need RTools to install the unofficial packages from GitHub, GitLab or other repositories. We going to cover what are R packages in the Chapter 5. For now, just know that to fully utilise the capabilities of R, you need to have RTools in your machine.\nThis page (https://cran.r-project.org/bin/windows/Rtools/rtools40.html) contains all the necessary information on how to install RTools on your machine. The basic steps as outlined on the page are:\n\nDownload RTools\nInstall the RTools\nPut RTools on the PATH",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Installing R and RStudio</span>"
    ]
  },
  {
    "objectID": "install-r.html#other-alternatives",
    "href": "install-r.html#other-alternatives",
    "title": "3  Installing R and RStudio",
    "section": "3.4 Other alternatives",
    "text": "3.4 Other alternatives\nOn the rare occasion that you are unable to install R or RStudio, you always have the option to use the Posit Cloud. As long as you have a Google account, you should be able to use the Posit Cloud freely. The free account is limited, however, it is more than enough for you to use throughout this book. Additionally, you can use the Google Colab, though, the user interface is slightly different to RStudio.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Installing R and RStudio</span>"
    ]
  },
  {
    "objectID": "install-r.html#chapter-summary",
    "href": "install-r.html#chapter-summary",
    "title": "3  Installing R and RStudio",
    "section": "3.5 Chapter summary",
    "text": "3.5 Chapter summary\nIn this chapter, we learn how to install R and RStudio.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Installing R and RStudio</span>"
    ]
  },
  {
    "objectID": "install-r.html#revision",
    "href": "install-r.html#revision",
    "title": "3  Installing R and RStudio",
    "section": "3.6 Revision",
    "text": "3.6 Revision\n\nWhat is RTools?\nWhat are the options if you can not install R and RStudio?",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Installing R and RStudio</span>"
    ]
  },
  {
    "objectID": "use-rstudio.html",
    "href": "use-rstudio.html",
    "title": "4  Introduction to RStudio",
    "section": "",
    "text": "4.1 Panes in RStudio\nThe first time we open RStudio we will see three panes as in Figure 4.1.\nPane 1 consists of three tabs:\nNext, Pane 2 consists of four tabs:\nLastly, Pane 3 consists of five tabs:\nThe information can be quite overwhelming, especially if you are new to R and RStudio. At this moment, you do not actually need to know every detail functionalities of each pane and tab yet. Once you become more familiar with RStudio, all this information will become second-hand to you.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Introduction to RStudio</span>"
    ]
  },
  {
    "objectID": "use-rstudio.html#panes-in-rstudio",
    "href": "use-rstudio.html#panes-in-rstudio",
    "title": "4  Introduction to RStudio",
    "section": "",
    "text": "Figure 4.1: RStudio interface.\n\n\n\n\n\nConsole - This pane is where R codes can be typed and executed. The console also is where the output will be displayed. However, any R codes typed into the console can not be saved.\nTerminal - This is a command-line interface that allows users to interact with the system shell, much like other terminal applications on your computer. It supports tasks such as navigating the file system, running command-line tools, and managing files, which can be useful for integrating non-R tasks into your workflow. However, for beginners, this tab is relatively unimportant.\nBackground Jobs - This pane enables users to run R scripts in the background without interrupting ongoing work in the Console. This feature is helps run long or complex tasks, as you can continue coding or working in the RStudio environment while the script executes independently.\n\n\n\nEnvironment - This pane displays all the active objects in the current R session, such as data frames, variables, functions, and vectors.\nHistory - This pane keeps a record of all commands that have been executed in the R console during the session\nConnections - This pane facilitates managing database connections within RStudio. It allows users to connect to external databases, view database contents, and run SQL queries directly from the IDE.\nTutorial - The Tutorial pane is part of RStudio’s learnr package, which hosts interactive tutorials directly within the IDE.\n\n\n\nFiles - This pane allows users to navigate, create, delete, and manage files within the current working directory. It helps in organizing project files, accessing scripts, data files, and outputs.\nPlots - This pane displays graphical output generated by R code, such as charts, graphs, and plots.\nPackages - This pane shows a list of installed R packages and their status (loaded or not). It also allows users to install, remove, or update packages, providing an easy way to manage package dependencies for projects.\nHelp - This pane provides access to documentation for R functions, packages, and commands.\nViewer - The Viewer pane is used for displaying web content such as interactive visualizations, markdown files, and other HTML outputs directly within RStudio.\nPresentation - This pane supports presenting R Markdown or Quarto documents in an interactive format. For example, if you are making a slide or HTML presentation, it will appear in this pane.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Introduction to RStudio</span>"
    ]
  },
  {
    "objectID": "use-rstudio.html#working-directory",
    "href": "use-rstudio.html#working-directory",
    "title": "4  Introduction to RStudio",
    "section": "4.2 Working directory",
    "text": "4.2 Working directory\nIn Figure 4.1, we have a Files tab in Pane 3. This is usually where your working directory is located. However, we can also check using the R code below:\n\ngetwd()\n\nAdditionally, the working directory can also be changed to your preferred location.\n\nsetwd(\"C:/Users/tengk/OneDrive/Desktop\")\n\nHere, I changed my working directory to my desktop folder. A good practice when running the analysis in R is to set up your working directory before you start any analysis project. So, any outputs and figures generated during the analysis will be saved in your preferred working directory.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Introduction to RStudio</span>"
    ]
  },
  {
    "objectID": "use-rstudio.html#r-script",
    "href": "use-rstudio.html#r-script",
    "title": "4  Introduction to RStudio",
    "section": "4.3 R script",
    "text": "4.3 R script\nOne of the few things to do before running the analysis project (besides setting up the working directory) is to type the R codes in the R script. R scripts is a plain text file with the extension .R. R script can be saved and the R codes in it can be re-run if needed.\nThere are a few ways to open the R script.\n\nClick on File (upper left side of RStudio) &gt; New File &gt; R Script.\nClick on the green plus button (below the File tab) &gt; R Script as shown in Figure 4.2.\n\n\n\n\n\n\n\nFigure 4.2: Opening the R Script.\n\n\n\nOnce you manage to open the R Script, you will see an additional pane as shown in Figure 4.3.\n\n\n\n\n\n\nFigure 4.3: R Script interface.\n\n\n\nThe R Script can be saved and additionally, at the lower right side of the pane, we can see R Script, confirming that this newly open file is an R Script.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Introduction to RStudio</span>"
    ]
  },
  {
    "objectID": "use-rstudio.html#updating-r-and-rstudio",
    "href": "use-rstudio.html#updating-r-and-rstudio",
    "title": "4  Introduction to RStudio",
    "section": "4.4 Updating R and RStudio",
    "text": "4.4 Updating R and RStudio\ninstallr package can be used to update R. You will what is an R package and how to install it in Chapter 5.\n\ninstallr::updateR()\n\nOnce you run installr::updateR() either in the Console or R Script, this package will check whether there is a newer version of R or not. If the newer version of R is available, this package installs the newer version after asking a series of questions such as do you want to transfer your old packages to the new version of R and whether you want to update the packages or not.\nTo update the RStudio, you can click the Help tab (at the top of the RStudio) &gt; Check for Updates.\n\n\n\n\n\n\nFigure 4.4: Updating RStudio",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Introduction to RStudio</span>"
    ]
  },
  {
    "objectID": "use-rstudio.html#chapter-summary",
    "href": "use-rstudio.html#chapter-summary",
    "title": "4  Introduction to RStudio",
    "section": "4.5 Chapter summary",
    "text": "4.5 Chapter summary\nIn this chapter, we learn about:\n\nBasic interface of RStudio.\nHow to set up the working directory.\nHow to update R and RStudio.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Introduction to RStudio</span>"
    ]
  },
  {
    "objectID": "use-rstudio.html#revision",
    "href": "use-rstudio.html#revision",
    "title": "4  Introduction to RStudio",
    "section": "4.6 Revision",
    "text": "4.6 Revision\n\nChange your working directory to your desktop.\nTry creating a new R Script, rename it as Test.R, and save it in your new working directory.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Introduction to RStudio</span>"
    ]
  },
  {
    "objectID": "basic-r.html",
    "href": "basic-r.html",
    "title": "5  Basics of R",
    "section": "",
    "text": "5.1 Getting help\nProbably the most basic thing to know is how to get help in R. Besides a quick Google search or asking ChatGPT, R also provides a help function. The help function can be accessed using ?.\n?mean()\nThe code above will open the Help pane, which explains what the function mean() does.",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Basics of R</span>"
    ]
  },
  {
    "objectID": "basic-r.html#data-types-in-r",
    "href": "basic-r.html#data-types-in-r",
    "title": "5  Basics of R",
    "section": "5.3 Data types in R",
    "text": "5.3 Data types in R\nThere are a few data types in R:\n\nNumeric\nInteger\nLogical\nCharacter\nComplex\n\nLet us see the example in R:\nFor the numeric:\n\nx1 &lt;- 11\nx2 &lt;- 11.9\n\nclass(x1); class(x2)\n\n[1] \"numeric\"\n\n\n[1] \"numeric\"\n\n\nBoth numbers are recognised as numeric in R. For integers, the number should be denoted by ‘L’ to be recognised as an integer.\n\nx3 &lt;- 11L\n\nclass(x3)\n\n[1] \"integer\"\n\n\nFor logical values, the boolean operators such as ‘FALSE’ and ‘TRUE’ are examples of logical values.\n\nx4 &lt;- c(TRUE, FALSE)\n\nclass(x4)\n\n[1] \"logical\"\n\n\nNext, we have character values.\n\nx5 &lt;- c(\"fruit\", \"apple\")\n\nclass(x5)\n\n[1] \"character\"\n\n\nLastly, we have complex values. The type of data is usually used to store numbers and imaginary components (for example, i in the code below).\n\nx6 &lt;- 9 + 3i\n\nclass(x6)\n\n[1] \"complex\"\n\n\nIt is important to note the data type for each value as the function for numeric values can only be applied to numeric values. For example, if we want to find a mean value.\n\nnumeric_val &lt;- 1:10 #list out all numbers between 1 and 10\nnumeric_val\n\n [1]  1  2  3  4  5  6  7  8  9 10\n\ncharacter_val &lt;- letters[1:10] #list out the first 10 alphabets\ncharacter_val\n\n [1] \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h\" \"i\" \"j\"\n\n\nNow, let us try applying the mean function to both data.\n\nmean(numeric_val)\n\n[1] 5.5\n\nmean(character_val)\n\nWarning in mean.default(character_val): argument is not numeric or logical:\nreturning NA\n\n\n[1] NA\n\n\nSo, R gives us a warning that the ‘character_val’ is not a numeric or logical value. Thus, the returning NA mean not available.",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Basics of R</span>"
    ]
  },
  {
    "objectID": "basic-r.html#data-structure-in-r",
    "href": "basic-r.html#data-structure-in-r",
    "title": "5  Basics of R",
    "section": "5.4 Data structure in R",
    "text": "5.4 Data structure in R\nThere are a few data structures in R:\n\nVector\nMatrix\nArray\nData frame\nList\n\n\n\n\n\n\n\nFigure 5.2: Data structures in R.\n\n\n\nDepending on the fields, certain data structures are more common compared to others.\n\n5.4.1 Vector\nVector is the most basic data structure in R. It can contain one data type at a time.\n\nvec_data &lt;- c(1, 2, 3, 4)\nvec_data\n\n[1] 1 2 3 4\n\n\nThe structure of the data can be checked using the function str().\n\nstr(vec_data)\n\n num [1:4] 1 2 3 4\n\n\nWe can further confirm whether vec_data is a vector or not by using the is.vector() function.\n\nis.vector(vec_data)\n\n[1] TRUE\n\n\nA TRUE result indicates that the data is a vector type.\n\n\n5.4.2 Matrix\nA matrix contains at least a single row and a single column. Contrary, to a vector which contains only a single row or a single column.\n\nmat_data &lt;- matrix(data = c(1, 2, 3, 4, 5, 6), nrow = 3, ncol = 2)\nmat_data\n\n     [,1] [,2]\n[1,]    1    4\n[2,]    2    5\n[3,]    3    6\n\n\nBy using str() function, we can see that the values are numerical and we have a matrix with 3 rows and 2 columns.\n\nstr(mat_data)\n\n num [1:3, 1:2] 1 2 3 4 5 6\n\n\nNext, we can confirm that our data is a matrix by using is.matrix().\n\nis.matrix(mat_data)\n\n[1] TRUE\n\n\n\n\n5.4.3 Array\nAn array is quite similar to a matrix except that it can contain several layers of rows and columns.\n\narr_data &lt;- array(data = c(1:6, 10:16), dim = c(2, 3, 2))\narr_data\n\n, , 1\n\n     [,1] [,2] [,3]\n[1,]    1    3    5\n[2,]    2    4    6\n\n, , 2\n\n     [,1] [,2] [,3]\n[1,]   10   12   14\n[2,]   11   13   15\n\n\nAs we can see, we have an array of 2 layers with each layer having 2 rows and 3 columns. By using the str() function, we can see that R recognises the array has integer values with 3 dimensions. The first dimension, 1:2 refers to the rows, the second dimension, 1:3 refers to the columns, and the last dimension, 1:2 refers to the layers.\n\nstr(arr_data)\n\n int [1:2, 1:3, 1:2] 1 2 3 4 5 6 10 11 12 13 ...\n\n\nis.array() can be used to ensure the data structure.\n\nis.array(arr_data)\n\n[1] TRUE\n\n\n\n\n5.4.4 Data frame\nA data frame is the extension of the matrix data structure. The difference between the former and the latter, the former contains the column names and each column may contain different data types.\n\ndf_data &lt;- data.frame(\n  ID = 1:5,\n  Name = c(\"Mamat\", \"Abu\", \"Ali\", \"Chong\", \"Eva\"),\n  Age = c(25, 30, 22, 35, 28),\n  Score = c(89, 95, 76, 88, 92)\n)\ndf_data\n\n  ID  Name Age Score\n1  1 Mamat  25    89\n2  2   Abu  30    95\n3  3   Ali  22    76\n4  4 Chong  35    88\n5  5   Eva  28    92\n\n\nWe can further check the data structure and type using str(). So, our data structure is a data frame, consisting of 4 columns; the first column is an integer, the second column is a character, third and fourth columns are numeric.\n\nstr(df_data)\n\n'data.frame':   5 obs. of  4 variables:\n $ ID   : int  1 2 3 4 5\n $ Name : chr  \"Mamat\" \"Abu\" \"Ali\" \"Chong\" ...\n $ Age  : num  25 30 22 35 28\n $ Score: num  89 95 76 88 92\n\n\nWe can double-check the data structure using is.data.frame().\n\nis.data.frame(df_data)\n\n[1] TRUE\n\n\n\n\n5.4.5 List\nLastly, we have a list. So, the list is a more advanced data structure in which we can have different data structures in a data structure. Let us see the example of a list in which we combine the previous vector and matrix data structures.\n\nlist_data &lt;- list(\n  \"vector\" = vec_data,\n  \"matrix\" = mat_data\n)\nlist_data\n\n$vector\n[1] 1 2 3 4\n\n$matrix\n     [,1] [,2]\n[1,]    1    4\n[2,]    2    5\n[3,]    3    6\n\n\nWe can further assess each data in the list using the $ symbol.\n\nlist_data$vector\n\n[1] 1 2 3 4\n\n\nBy using str(), we see our data is a list with 2 elements or components; a vector and matrix.\n\nstr(list_data)\n\nList of 2\n $ vector: num [1:4] 1 2 3 4\n $ matrix: num [1:3, 1:2] 1 2 3 4 5 6\n\n\nTo further confirm our data is a list, we can use is.list().\n\nis.list(list_data)\n\n[1] TRUE",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Basics of R</span>"
    ]
  },
  {
    "objectID": "basic-r.html#packages",
    "href": "basic-r.html#packages",
    "title": "5  Basics of R",
    "section": "5.6 Packages",
    "text": "5.6 Packages\nA package is a collection of functions and sample data that can be utilised for certain tasks. Certain functions in R are already loaded when you open R or RStudio. However, to use more advanced functions we need to install and load a package.\nThe packages can installed using install.packages(). For example, the code below will install the dplyr package which is commonly utilised for data wrangling and manipulation.\n\ninstall.packages(\"dplyr\")\n\nTo use the installed packages, we need to load the packages using the library() function.\n\nlibrary(dplyr)\n\nNow, that we know what is a package, we might wonder where exactly these packages coming from.\nThe official packages in R are located in the Comprehensive R Archive Network (CRAN). This link contains all available packages in CRAN. Additionally, there is CRAN Task Views. At the time of this writing, CRAN contains 21,606 R packages intended for various tasks.\nFurthermore, for those interested in bioinformatics, the related packages are located in the Bioconductor. At the time of this writing, Bioconductor contains 2,289 R packages related to bioinformatics.\nIn addition to CRAN and Bioconductor, there are unofficial R packages, which are usually located in GitHub and GitLab. There are probably thousands of these unofficial packages. For example, dmetar which is located in GitHub, contains R functions and codes to facilitate the conduction of meta-analyses.\nMore often than not, the official packages in CRAN also have their GitHub repositories in which they contain the latest development of R functions and codes before they going to be released in CRAN. So, current bugs and errors in the package are corrected first using the unofficial packages from GitHub or GitLab before they are eventually released to the CRAN repositories.\nSeveral packages can help in installing the unofficial packages. The two most commonly used packages are devtools and remote (or at least I commonly used them).\nFirst, we need to install the packages.\n\ninstall.packages(\"devtools\")\ninstall.packages(\"remote\")\n\nNext, we can install the unofficial packages.\n\ndevtools::install_github(\"MathiasHarrer/dmetar\")\nremotes::install_github(\"MathiasHarrer/dmetar\")\n\nMathiasHarrer refers to the GitHub account or usually the author’s account on GitHub, followed by the name of the package. Depending on one’s preference, we can choose to use either devtools or remote.",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Basics of R</span>"
    ]
  },
  {
    "objectID": "basic-r.html#chapter-summary",
    "href": "basic-r.html#chapter-summary",
    "title": "5  Basics of R",
    "section": "5.10 Chapter summary",
    "text": "5.10 Chapter summary\nIn this chapter, we learn about:\n\nData, its types and structures in R.\nR packages and functions.\nPipe operators.",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Basics of R</span>"
    ]
  },
  {
    "objectID": "basic-r.html#revision",
    "href": "basic-r.html#revision",
    "title": "5  Basics of R",
    "section": "5.11 Revision",
    "text": "5.11 Revision\n\nWhat this ? actually do in R?\nList all the data types that we learn in this chapter.\nList all the data structures that we learn in this chapter.\nWhat is the difference between installing the package and loading the package?\nWhich one to choose between |&gt; and %&gt;%?\nList three packages in tidyverse and summarise their functionalities.",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Basics of R</span>"
    ]
  },
  {
    "objectID": "data-wrangling.html",
    "href": "data-wrangling.html",
    "title": "6  Data wrangling",
    "section": "",
    "text": "This chapter is currently under construction. Stay tuned for updates!",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Data wrangling</span>"
    ]
  },
  {
    "objectID": "plotting.html",
    "href": "plotting.html",
    "title": "7  Data visualisation",
    "section": "",
    "text": "This chapter is currently under construction. Stay tuned for updates!",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Data visualisation</span>"
    ]
  },
  {
    "objectID": "loop-function.html",
    "href": "loop-function.html",
    "title": "8  Loops and functions",
    "section": "",
    "text": "This chapter is currently under construction. Stay tuned for updates!",
    "crumbs": [
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Loops and functions</span>"
    ]
  },
  {
    "objectID": "data-explore.html",
    "href": "data-explore.html",
    "title": "9  Data exploration",
    "section": "",
    "text": "This chapter is currently under construction. Stay tuned for updates!",
    "crumbs": [
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Data exploration</span>"
    ]
  },
  {
    "objectID": "descriptive-stat.html",
    "href": "descriptive-stat.html",
    "title": "10  Descriptive statistics",
    "section": "",
    "text": "This chapter is currently under construction. Stay tuned for updates!",
    "crumbs": [
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Descriptive statistics</span>"
    ]
  },
  {
    "objectID": "summary.html",
    "href": "summary.html",
    "title": "11  Summary",
    "section": "",
    "text": "This chapter is currently under construction. Stay tuned for updates!",
    "crumbs": [
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Summary</span>"
    ]
  },
  {
    "objectID": "basic-r.html#data",
    "href": "basic-r.html#data",
    "title": "5  Basics of R",
    "section": "5.3 Data",
    "text": "5.3 Data\nR itself contains the internal data that you can load for practice or other purposes. You can run data() in console to see what are the data available in R.\n\ndata()\n\nSo, for example, ifyou want to load any of these data, you can type the name of the datasets. You will see under the Environment pane, the chickWeight dataset is loaded to your environment.\n\ndata(\"ChickWeight\")\n\nAdditionally, it is quite common that R packages have their own datasets as well. We will see this many times in this book going forward. Lastly, R is capable to read different data format.\n\n\n\nTable 5.1: Common data formats and corresponding R codes for reading them.\n\n\n\n\n\nFormat\nR codes\n\n\n\n\n.csv\nread.csv()\n\n\n.sav (SPSS)\nhaven::read_sav()\n\n\n.xlsx (Excel)\nreadxl::read_excel()\n\n\n.txt\nread.table()\n\n\n.dta (STATA)\nhaven::read_dta()\n\n\n\n\n\n\nThe data formats that can be read by are limited to the one listed in the table. Almost all data formats can be read in R. An efficient way to know whether R is capable to read certain data formats by just a quick Google search.\nFor the rest of the chapter we going to iris dataset, which already available in R. To know more about this dataset, you can type the below code in the console.\n\n?iris",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Basics of R</span>"
    ]
  },
  {
    "objectID": "basic-r.html#functions",
    "href": "basic-r.html#functions",
    "title": "5  Basics of R",
    "section": "5.7 Functions",
    "text": "5.7 Functions\nA function in R is a block of code designed to perform a specific task. It consists of an argument, in which we need to supply it. For example, the mean() function is designed to find the mean or average across the numeric values. The numeric values are the argument that we need to supply to the function.\n\nnum_values &lt;- c(5, 6, 8, 10)\nmean(num_values)\n\n[1] 7.25\n\n\nThe base R itself has numerous functions that are accessible to us. These base R functions can be used immediately once we open R (or RStudio or any other IDEs). In contrast, we also have R functions from the packages that we installed. First, we need to install the packages.\n\ninstall.packages(\"tidyverse\")\n\nWe will learn about tidyverse in a little bit. Coming on to our current installation, once you install the package there are two ways to use the function inside the package. First, by loading the package, subsequently, all the functions in the package are ready to be used by us. For example below, bind_rows() is one of the functions from the dplyr package.\n\n# Load the package\nlibrary(dplyr) \n\n# Example of functions from dplyr package\nbind_rows()\nbind_cols()\n\nSecondly, we can use :: to access a single function that we are interested in. However, in this approach, only a single function is loaded.\n\n# Example of dplyr functions\ndplyr::bind_rows()\ndplyr::bind_cols()\n\nAs we can see, every time we want to call a function from the dplyr package we type dplyr:: as we do not load the package first.",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Basics of R</span>"
    ]
  },
  {
    "objectID": "basic-r.html#tidyverse-package",
    "href": "basic-r.html#tidyverse-package",
    "title": "5  Basics of R",
    "section": "5.8 Tidyverse package",
    "text": "5.8 Tidyverse package\nWe have learned that R packages contain a collection of functions and R codes that we utilise once we load the packages. So, tidyverse is an opinionated collection of R packages designed for data science.\n\n# List of all packages in tidyverse\ntidyverse::tidyverse_packages(include_self = FALSE) |&gt;\n  data.frame(Packages = _)\n\n        Packages\n1          broom\n2     conflicted\n3            cli\n4         dbplyr\n5          dplyr\n6         dtplyr\n7        forcats\n8        ggplot2\n9    googledrive\n10 googlesheets4\n11         haven\n12           hms\n13          httr\n14      jsonlite\n15     lubridate\n16      magrittr\n17        modelr\n18        pillar\n19         purrr\n20          ragg\n21         readr\n22        readxl\n23        reprex\n24         rlang\n25    rstudioapi\n26         rvest\n27       stringr\n28        tibble\n29         tidyr\n30          xml2\n\n\nTable 5.2 below summarises common packages in tidyverse and its uses.\n\n\n\nTable 5.2: Common packages in tidyverse.\n\n\n\n\n\n\n\n\n\nPackages\nSummary\n\n\n\n\nggplot2\nFor data visualisation.\n\n\ndplyr\nProvides tools for data manipulation, including functions for filtering, selecting, grouping, and summarizing data.\n\n\ntidyr\nSpecializes in data tidying, allowing users to transform datasets into a tidy format ready for analysis or visualisation.\n\n\nreadr\nUsed for reading rectangular data (e.g., CSV, TSV files) into R quickly and efficiently.\n\n\npurr\nIntroduces a functional programming paradigm in R with tools for applying functions to data structures like lists and vectors.\n\n\ntibble\nEnhances data frames in R by making them more user-friendly with better printing options and stricter type checking\n\n\nstringr\nFacilitates consistent handling of strings, offering functions for string manipulation, pattern matching, and transformations.\n\n\nforcats\nDesigned to work with categorical data (factors).\n\n\n\n\n\n\nTidyverse is commonly utilised for data analysis and throughout this book, we going to use tidyverse functions numerous times.",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Basics of R</span>"
    ]
  },
  {
    "objectID": "basic-r.html#pipe-operators",
    "href": "basic-r.html#pipe-operators",
    "title": "5  Basics of R",
    "section": "5.9 Pipe operators",
    "text": "5.9 Pipe operators\nThere two types of pipe in R:\n\n|&gt;: this pipe is from base R, first introduced in R version 4.1.0.\n%&gt;%: this pipe is from the magrittr package, which presented tidyverse.\n\nTo use |&gt;, we do not actually need to load anything as it is already available in base R. However, to use %&gt;%, you need to load tidyverse. Certain tidyverse associated packages such as dplyr, forcats, and magrittr also load the %&gt;%.\nThe main function of these pipe operators (regardless of which one we use) is to make our R codes more readable and intuitive. So, let us compare the codes without and with the pipe.\n\nmean_value &lt;- mean(\n  subset(\n    data.frame(value = 1:10, group = rep(c(\"A\", \"B\"), each = 5)),\n    group == \"A\"\n  )$value\n)\nmean_value\n\n[1] 3\n\n\nNow, compare the codes with the pipe.\n\nmean_value &lt;- data.frame(value = 1:10, group = rep(c(\"A\", \"B\"), each = 5)) |&gt;\n  subset(group == \"A\") |&gt;\n  with(mean(value))\nmean_value\n\n[1] 3\n\n\nBasically, what we do in both R codes are:\n\nCreate a data frame with ten rows and two columns.\n\n\ndata.frame(value = 1:10, group = rep(c(\"A\", \"B\"), each = 5))\n\n   value group\n1      1     A\n2      2     A\n3      3     A\n4      4     A\n5      5     A\n6      6     B\n7      7     B\n8      8     B\n9      9     B\n10    10     B\n\n\n\nFilter out the group column to value A.\nCalculate the mean.\n\n\nmean(c(1, 2, 3, 4, 5))\n\n[1] 3\n\n\nComing back to both R codes, we can intuitively see that the codes with the pipe are more readable and clear compared to the other one. The codes with pipe can be read line by line, while the codes without the pipe need to be read inside out. As you can imagine, once our codes are more complex, the less readable the codes will become.\nSo, which pipe operators to choose?\nIn most cases, the differences are not significant enough to impact your code. Therefore, you can choose the pipe operator that best suits your preference or coding style. Most users will find that both options perform similarly for general tasks, so selecting one often comes down to familiarity or ease of use.\n|&gt; is a built-in pipe operator which can be used immediately without the need to load any package. %&gt;% can be used once the tidyverse package is loaded. The latter pipe has short cut built-in in RStudio. For Windows user, Ctrl + Shift + M and for Mac user, Cmd + Shift + M. Additionally, we can set up the shortcut for |&gt; or further change the shortcut for %&gt;%, though, this will not be covered in this book.",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Basics of R</span>"
    ]
  },
  {
    "objectID": "basic-r.html#getting-help",
    "href": "basic-r.html#getting-help",
    "title": "5  Basics of R",
    "section": "",
    "text": "Figure 5.1: The Help pane in RStudio.",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Basics of R</span>"
    ]
  },
  {
    "objectID": "basic-r.html#executing-the-code",
    "href": "basic-r.html#executing-the-code",
    "title": "5  Basics of R",
    "section": "5.2 Executing the code",
    "text": "5.2 Executing the code\nThe codes can be typed either in R Script or Console. The code in R Scripts can be executed by placing the cursor at any line of the codes and clicking Ctrl + Enter in Windows and Cmd + Enter in Macs.\n\n# Example 1: A single line of code\nmean(1:10) \n\n# Example 2: A multiple lines of code\nc(1:10, 10.6, 11.9) |&gt;\n  mean() |&gt;\n  round(digits = 1)\n\nIn the second example (example of multiple lines of code), a cursor can be placed at any line of code. Additionally, the codes in the Console can be executed by clicking Enter only. If you want to run any code in this book, you should copy and paste it into the R Script instead of the Console, especially if there are multiple lines of code. Notably, the codes should be run in sequence unless the current line of codes is independent from the previous line of codes.",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Basics of R</span>"
    ]
  },
  {
    "objectID": "basic-r.html#data-in-r",
    "href": "basic-r.html#data-in-r",
    "title": "5  Basics of R",
    "section": "5.5 Data in R",
    "text": "5.5 Data in R\nR itself contains the internal data that you can load for practice or other purposes. You can run data() in the Console to see what are the data available in R.\n\ndata()\n\nSo, for example, if you want to load any of these data, you can type the name of the datasets. You will see under the Environment pane, the chickWeight dataset is loaded to your environment.\n\ndata(\"ChickWeight\")\n\nAdditionally, it is quite common that R packages have their own datasets as well. We will see this many times in this book going forward. Lastly, R is capable of reading different data formats.\n\n\n\nTable 5.1: Common data formats and corresponding R codes for reading them.\n\n\n\n\n\nFormat\nR codes\n\n\n\n\n.csv\nread.csv()\n\n\n.sav (SPSS)\nhaven::read_sav()\n\n\n.xlsx (Excel)\nreadxl::read_excel()\n\n\n.txt\nread.table()\n\n\n.dta (STATA)\nhaven::read_dta()\n\n\n\n\n\n\nThe data formats that can be read are limited to the one listed in the table. Almost all data formats can be read in R. An efficient way to know whether R is capable of reading certain data formats by just a quick Google search.\nFor the rest of the chapter we going to the iris dataset, which is already available in R. To know more about this dataset, you can type the below code in the console.\n\n?iris",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Basics of R</span>"
    ]
  }
]